; ModuleID = 'FlatB'

@data = global [100 x i32] zeroinitializer
@i = common global i32 0
@sum = common global i32 0
@0 = private unnamed_addr constant [12 x i8] c"Sum value: \00"
@1 = private unnamed_addr constant [4 x i8] c"%s \00"
@2 = private unnamed_addr constant [4 x i8] c"%d \00"
@3 = private unnamed_addr constant [2 x i8] c"\0A\00"
@4 = private unnamed_addr constant [3 x i8] c"%s\00"

define void @main() {
B1:
  store i32 1, i32* @i
  %0 = load i32, i32* @i
  %gtcomparetmp = icmp ugt i32 %0, 100
  br i1 %gtcomparetmp, label %next, label %for

for:                                              ; preds = %for, %B1
  %1 = load i32, i32* @i
  %2 = load i32, i32* @i
  %data_Index = getelementptr [100 x i32], [100 x i32]* @data, i32 0, i32 %2
  store i32 %1, i32* %data_Index
  %3 = load i32, i32* @i
  %4 = add i32 %3, 1
  store i32 %4, i32* @i
  %gtcomparetmp1 = icmp ugt i32 %4, 100
  br i1 %gtcomparetmp1, label %next, label %for

next:                                             ; preds = %for, %B1
  store i32 0, i32* @sum
  store i32 1, i32* @i
  %5 = load i32, i32* @i
  %gtcomparetmp4 = icmp ugt i32 %5, 100
  br i1 %gtcomparetmp4, label %next3, label %for2

for2:                                             ; preds = %for2, %next
  %6 = load i32, i32* @sum
  %7 = load i32, i32* @i
  %data_Index5 = getelementptr [100 x i32], [100 x i32]* @data, i32 0, i32 %7
  %8 = load i32, i32* %data_Index5
  %addtmp = add i32 %6, %8
  store i32 %addtmp, i32* @sum
  %9 = load i32, i32* @i
  %10 = add i32 %9, 1
  store i32 %10, i32* @i
  %gtcomparetmp6 = icmp ugt i32 %10, 100
  br i1 %gtcomparetmp6, label %next3, label %for2

next3:                                            ; preds = %for2, %next
  %11 = call i32 (...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0))
  %12 = load i32, i32* @sum
  %13 = call i32 (...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i32 %12)
  %14 = call i32 (...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  ret void
}

declare i32 @printf(...)

declare i32 @scanf(...)
